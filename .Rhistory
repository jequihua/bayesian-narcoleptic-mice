"Galletas Saladas",
"Pan Dulce Empacado",
"Pastelitos",
"Avena / Granola",
"Cereales empacados",
"Fruta",
"Leche saborizada",
"Paletas / helados",
"Pan dulce de panadería",
"Yogurt")
newdep = factor(dat_model_clean_a$Categoria_agrup,levels=lvls)
newdep = factor(dat_model_clean_a$Categoria_agrup)
newdep
levels(newdep)=lvls
table(newdep)
dat_model_clean_a$Categoria_agrup = newdep
dat_model_clean_a$Categoria=NULL
# fit random forest model to category
ssize = floor(0.7*(min(table(dat_model_clean_a$Categoria_agrup))))
table(dat_model_clean_a$Categoria_agrup)
rf = randomForest(y=dat_model_clean_a[,"Categoria_agrup"],x=dat_model_clean_a[,-136],ntree=3000,
sampsize = rep(ssize,length(unique(dat_model$Categoria))),
importance=TRUE)
rf = randomForest(y=dat_model_clean_a[,"Categoria_agrup"],x=dat_model_clean_a[,-136],ntree=3000,
sampsize = rep(ssize,length(unique(dat_model$Categoria_agrup))),
importance=TRUE)
rf = randomForest(y=dat_model_clean_a[,"Categoria_agrup"],x=dat_model_clean_a[,-136],ntree=3000,
sampsize = rep(ssize,length(unique(dat_model_clean_a$Categoria_agrup))),
importance=TRUE)
confusion = as.data.frame.matrix(rf$confusion)
confusion
write.table(confusion,"D:/work_sb/20180509_bimbons/kd_sos/categoriasAgrupadas_confusion.csv",sep=",",row.names = TRUE,col.names = NA)
importance = as.data.frame(importance(rf,scale=TRUE))
importance$MeanDecreaseGini=NULL
importance$w=as.data.frame(good_vars)[-4,1]
write.table(importance,"D:/work_sb/20180509_bimbons/kd_sos/categoriasAgrupadas_keydrivers-varImp.csv",sep=",",row.names = TRUE,col.names = NA)
# Load packages.
library("jsonlite")
# load Json
json_data <- fromJSON("D:/work2/mariana_json/app1.json",encoding="UTF-8")
# load Json
json_data <- fromJSON("D:/work2/mariana_json/app1.json",encoding="UTF-8")
?fromJSON
# load Json
json_data <- fromJSON("D:/work2/mariana_json/app1.json")
# load Json
json_data <- fromJSON(readLines(D:/work2/mariana_json/app1.json"),encoding="UTF-8")
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),encoding="UTF-8")
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
devtools::install_github("jeroen/jsonlite")
# Load packages.
library("jsonlite")
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
# Load packages.
library("jsonlite")
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
devtools::install_github("jeroen/jsonlite")
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
# Load packages.
library("jsonlite")
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
# try to make a df
asFrame <- str(fromJSON(json_data))
# load Json
json_data <- fromJSON(readLines("D:/work2/mariana_json/app1.json"),flatten=TRUE)
# try to make a df
asFrame <- str(json_data)
# load Json
json_data <- fromJSON("D:/work2/mariana_json/app1.json")
# try to make a df
asFrame <- str(json_data)
head(asFrame)
head(json_data)
# anps_snmb
anp = read_excel("D:/work2/mariana_json/ANP2017NamesId.xlsx")
library("readxl")
# anps_snmb
anp = read_excel("D:/work2/mariana_json/ANP2017NamesId.xlsx")
head(anp)
anp = anp[anp$snmb==1,]
json_data$Id_07=0
head(json_data)
i=1
id07 = strsplit(json_data$reporte,split="\\.h")[[1]][1]
class(anp$ID_07)
class(ido7)
class(id07)
id07 = as.numeric(strsplit(json_data$reporte,split="\\.h")[[1]][1])
json_data$snmb=0
json_data$Id_07=0
for (i in 1:nrow(json_data)){
id07 = as.numeric(strsplit(json_data$reporte,split="\\.h")[[1]][1])
json_data$Id_07=id07
if (id07 %in% anp$ID_07){
json_data$snmb[i]=1
}
}
table(json_data$snmb)
1 %in% c(2,3)
1 %in% c(1,3)
class(anp$ID_07)
anp$ID_07
# anps_snmb
anp = read_excel("D:/work2/mariana_json/ANP2017NamesId.xlsx")
anp = anp[!is.na(anp$snmb)&anp$snmb==1,]
json_data$snmb=0
json_data$Id_07=0
for (i in 1:nrow(json_data)){
id07 = as.numeric(strsplit(json_data$reporte,split="\\.h")[[1]][1])
json_data$Id_07=id07
if ((id07 %in% anp$ID_07)){
json_data$snmb[i]=1
}
}
table(json_data$snmb)
json_data$Id_07
json_data$snmb=0
json_data$Id_07=0
for (i in 1:nrow(json_data)){
id07 = as.numeric(strsplit(json_data$reporte[i],split="\\.h")[[1]][1])
json_data$Id_07=id07
if ((id07 %in% anp$ID_07)){
json_data$snmb[i]=1
}
}
table(json_data$snmb)
# out json
out = toJSON(json_data,pretty=TRUE)
options("encoding" = "UTF-8")
write(json,"D:/work2/mariana_json/app1_snmb.json")
write(out,"D:/work2/mariana_json/app1_snmb.json")
# Load packages.
library("dplyr")
library("readxl")
library("reader")
library("readr")
# Read excel.
data_excel = read_excel("C:/Users/julco/Downloads/Juligay.xlsx",sheer="Café sin glifosato")
# Read excel.
data_excel = read_excel("C:/Users/julco/Downloads/Juligay.xlsx",sheet="Café sin glifosato")
# Data structure.
head(data_excel)
# Group by species
data_excel_grouped = group_by(data_excel,`Especie epítita`)
# Summary of region sums.
summ_sp = summary(data_excel_grouped,
counts_1=sum(`1`))
head(summ_sp)
# Summary of region sums.
summ_sp = summarise(data_excel_grouped,
counts_1=sum(`1`))
head(summ_sp)
# Summary of region sums.
summ_sp = summarise(data_excel_grouped,
counts_1=sum(`1`),
counts_2=sum(`2`),
counts_3=sum(`3`),
counts_4=sum(`4`),
counts_5=sum(`5`),)
head(summ_sp)
# Read excel.
data_excel = read_excel("C:/Users/julco/Downloads/Juligay.xlsx",sheet="Árboles sin glifosato")
# Data structure.
head(data_excel)
# Group by species
data_excel_grouped = group_by(data_excel,`Especie epítita`)
# Summary of region sums.
summ_sp = summarise(data_excel_grouped,
counts_1=sum(`1`),
counts_2=sum(`2`),
counts_3=sum(`3`),
counts_4=sum(`4`),
counts_5=sum(`5`))
# View summ_sp
View(summ_sp)
# Load packages.
library("dplyr")
library("tidyr")
library("readxl")
library("readr")
# Load data.
dat = read_excel("D:/perrarcos/Basefamilias.xlsx",sheet=2)
# Construimos la variable Zona pasando de wide a Long (sobre zona).
dat = gather(dat,zona,conteos_zona,`1`:`5`)
# Construimos la PUCTA variable id Sitio-Cuandrante-Hospedero-Zona.
dat$hospedero_unico = paste0("Sit-",dat$Sitio,"_Cuad-",dat$Cuadrante,"_Hosp-",dat$Hospedero,"_Zona-",dat$zona)
# ¿Qué hospederos únicos tenemos?
unique(dat$hospedero_unico)
# ¿Cuántos zonas-hospederos únicos tenemos?
length(unique(dat$hospedero_unico))    # 820
# Agrupar la tabla por hospedero único y luego por Familia
dat_agrupada = dat %>%
group_by(hospedero_unico, Familia) %>%
summarise(conteos_zona=sum(conteos_zona))
# Ahora convertir de Long a Wide con base en la variable Familia.
dat_final = spread(dat_agrupada,Familia,conteos_zona,fill=0)
# Separate ID-variable
dat_final = separate(dat_final,hospedero_unico,c("Sitio","Cuadrante","Hospedero","Zona"),sep="_",remove=FALSE)
# Write to disk.
write_csv(dat_final,"D:/perrarcos/Conteos_Familia-por-HospUnicos.csv")
# Write to disk.
write_csv(dat_final,"D:/perrarcos/Conteos_Familia-por-HospUnicos.csv")
# install.packages("devtools")
devtools::install_github("mvuorre/brmstools")
library("brmstools")
# Load packages.
library("tidyverse")
library("ggplot2")
library("brms")
library("brmstools")
library("bayesplot")
# Load recorded behaviors data.
data <- read_csv("./data/videos/recorded_behaviors.csv")
### Duration of each BA (narcoleptic attack) model.
ba_seconds <- filter(data,behavior=="BA")
# Change variable types.
ba_seconds$group <- as.factor(ba_seconds$group)
ba_seconds$mouse <- as.factor(ba_seconds$mouse)
# Chart raw data boxplots.
p <- ggplot(ba_seconds, aes(x=group, y=seconds)) + geom_boxplot(lwd=1.2)
p + theme_bw(base_size = 20)
ggsave("./images3/1_ba_duration/1_ba_duration_rawdata_boxplots.png",
width = 10, height = 8, dpi = 300,device="png")
# Which priors can we specify for our model?
get_prior(seconds ~ group + (1|mouse), data=ba_seconds)
# Fit brms model for duration of each BA attack.
ba_seconds_fit <- brm(seconds ~ group + (1|mouse),
data = ba_seconds, family = lognormal(), control = list(adapt_delta = 0.999))
setwd("D:/repositories/bayesian-narcoleptic-mice/")
# Load packages.
library("tidyverse")
library("ggplot2")
library("brms")
library("brmstools")
library("bayesplot")
# Load recorded behaviors data.
data <- read_csv("./data/videos/recorded_behaviors.csv")
### Duration of each BA (narcoleptic attack) model.
ba_seconds <- filter(data,behavior=="BA")
# Change variable types.
ba_seconds$group <- as.factor(ba_seconds$group)
ba_seconds$mouse <- as.factor(ba_seconds$mouse)
# Chart raw data boxplots.
p <- ggplot(ba_seconds, aes(x=group, y=seconds)) + geom_boxplot(lwd=1.2)
p + theme_bw(base_size = 20)
ggsave("./images3/1_ba_duration/1_ba_duration_rawdata_boxplots.png",
width = 10, height = 8, dpi = 300,device="png")
# Which priors can we specify for our model?
get_prior(seconds ~ group + (1|mouse), data=ba_seconds)
# Fit brms model for duration of each BA attack.
ba_seconds_fit <- brm(seconds ~ group + (1|mouse),
data = ba_seconds, family = lognormal(), control = list(adapt_delta = 0.999))
install.packages("ggridges")
forest(ba_seconds_fit)
post <- posterior_samples(ba_seconds_fit)
names(post)
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
) +
labs(x = NULL, y = NULL) +
coord_flip() +
theme(text = element_text(size = 20, family = "Times"),
axis.text.y = element_text(hjust = 0),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
post <- posterior_samples(ba_seconds_fit)
postl <- data.frame(stack(post[,1:3]))
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
) +
labs(x = NULL, y = NULL) +
coord_flip() +
theme(text = element_text(size = 20, family = "Times"),
axis.text.y = element_text(hjust = 0),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
) +
labs(x = NULL, y = NULL) +
coord_flip() +
theme(text = element_text(size = 20, family = "Times"),
axis.text.y = element_text(hjust = 0),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
########################################################################################################
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
) +
labs(x = NULL, y = NULL) +
coord_flip() +
theme(text = element_text(size = 20, family = "Times"),
axis.text.y = element_text(hjust = 0),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
install.packages("sjlabelled")
library("sjlabelled")
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
) +
labs(x = NULL, y = NULL) +
coord_flip() +
theme(text = element_text(size = 20, family = "Times"),
axis.text.y = element_text(hjust = 0),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
library("ggplot2")
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
) +
labs(x = NULL, y = NULL) +
coord_flip() +
theme(text = element_text(size = 20, family = "Times"),
axis.text.y = element_text(hjust = 0),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width") +
stat_summary(fun.ymin = function(x){quantile(x, .25)},
fun.ymax = function(x){quantile(x, .75)},
fun.y = median, size = .5, shape = 20) +
scale_x_discrete(labels = c("Intercept", "Sham", "txcb","txox")) +
scale_y_continuous(breaks = c(round(median(post$b_Intercept), digits = 1),
round(median(post$b_groupsham), digits = 1),
round(median(post$b_grouptxcb), digits = 1),
round(median(post$b_grouptxox), digits = 1))
)
ggplot(data = postl, aes(x = order, y = values)) +
geom_flat_violin(color = "grey67", size = .25, fill = "grey67", scale = "width")
# Load data.
dat = read_excel("D:/perrarcos/Basefamilias.xlsx",sheet=2)
# Load packages.
library("dplyr")
library("tidyr")
library("readxl")
library("readr")
# Load data.
dat = read_excel("D:/perrarcos/Basefamilias.xlsx",sheet=2)
dat %>%
gather(Zona, presencia, `1`:`5`) %>%
unite(Familia_zona, Familia, Zona, sep = "-") %>%
count(Tratamiento, Sitio, Cuadrante, Hospedero, Familia_zona) %>%
spread(Familia_zona, n, fill = 0)
View(dat)
dat = dat %>%
gather(Zona, presencia, `1`:`5`) %>%
unite(Familia_zona, Familia, Zona, sep = "-") %>%
count(Tratamiento, Sitio, Cuadrante, Hospedero, Familia_zona) %>%
spread(Familia_zona, n, fill = 0)
View(dat)
dat = dat %>%
gather(Zona, presencia, `1`:`5`) %>%
unite(Familia_zona, Familia, Zona, sep = "-") %>%
group_by(Sitio, Cuadrante, Hospedero, Familia_zona) %>%
summarise(n = sum(presencia)) %>%
spread(Familia_zona, n, fill = 0)
# Load data.
dat = read_excel("D:/perrarcos/Basefamilias.xlsx",sheet=2)
dat = dat %>%
gather(Zona, presencia, `1`:`5`) %>%
unite(Familia_zona, Familia, Zona, sep = "-") %>%
group_by(Sitio, Cuadrante, Hospedero, Familia_zona) %>%
summarise(n = sum(presencia)) %>%
spread(Familia_zona, n, fill = 0)
View(dat)
